#include <stdio.h>
#include <stdlib.h>

#define MAX 100

struct Node {
    int vertex;
    struct Node* next;
};

struct Graph {
    int numVertices;
    struct Node** adjLists;
    int* visited;
};

struct Node* createNode(int v) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = vertices;
    graph->adjLists = (struct Node**)malloc(vertices * sizeof(struct Node*));
    graph->visited = (int*)malloc(vertices * sizeof(int));
    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
        graph->visited[i] = 0;
    }
    return graph;
}

void addEdge(struct Graph* graph, int src, int dest) {
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;
}

void dfs(struct Graph* graph, int vertex) {
    struct Node* adjList;
    struct Node* temp;

    graph->visited[vertex] = 1;
    printf("%d ", vertex);
    adjList = graph->adjLists[vertex];

    while (adjList) {
        int adjVertex = adjList->vertex;
        if (!graph->visited[adjVertex]) dfs(graph, adjVertex);
        adjList = adjList->next;
    }
}

int main() {
    struct Graph* graph = createGraph(6);
    addEdge(graph, 0, 1); addEdge(graph, 0, 2);
    addEdge(graph, 1, 3); addEdge(graph, 1, 4);
    addEdge(graph, 2, 4); addEdge(graph, 3, 5);
    addEdge(graph, 4, 5);

    printf("DFS starting from vertex 0:\n");
    dfs(graph, 0);

    return 0;
}
